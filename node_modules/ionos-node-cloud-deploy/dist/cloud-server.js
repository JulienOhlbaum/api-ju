"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_ssh_1 = require("node-ssh");
const ora_1 = __importDefault(require("ora"));
const utils_1 = require("./utils");
const ssh = new node_ssh_1.NodeSSH();
const INCLUDE_DEFAULTS = ['*', '**/*']; // includes ALL files, except dot files
const EXCLUDE_DEFAULTS = [
    'dist/**/*.map',
    'node_modules/**',
    'node_modules/**/.*',
    '.git/**',
]; // exludes all .map files and every file in .git & node_modules folder
class CloudServer {
    constructor(options = {}) {
        const { username = '', password = '', host = '', localDir = undefined, remoteDir = '/var/www/', include = INCLUDE_DEFAULTS, exclude = EXCLUDE_DEFAULTS, } = options;
        this.remoteDir = remoteDir;
        this.ftpConfig = {
            user: username,
            password,
            host,
            port: 22,
            localRoot: localDir,
            remoteRoot: remoteDir,
            include,
            exclude,
            deleteRemote: false,
            forcePasv: true,
            sftp: true,
        };
        this.sshConfig = {
            host,
            port: 22,
            username,
            password,
        };
    }
    sshConnect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield ssh.connect(this.sshConfig);
        });
    }
    upload(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.uploadSftp)(Object.assign(Object.assign({}, this.ftpConfig), options));
        });
    }
    install() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!ssh.isConnected()) {
                yield this.sshConnect();
            }
            const spinner = (0, ora_1.default)('Installing packages...').start();
            try {
                yield ssh.execCommand('npm ci', { cwd: this.remoteDir });
                spinner.succeed('Installed packages');
            }
            catch (error) {
                console.log(error);
                spinner.fail();
            }
        });
    }
    restart() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!ssh.isConnected()) {
                yield this.sshConnect();
            }
            const spinner = (0, ora_1.default)('Restarting the server...').start();
            try {
                yield (0, utils_1.execRestart)(ssh, this.remoteDir);
                spinner.succeed('Server restarted');
            }
            catch (error) {
                spinner.fail();
            }
        });
    }
    deploy(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.upload(options);
                yield this.install();
                yield this.restart();
            }
            catch (error) {
                console.error(error);
            }
            process.exit();
        });
    }
}
exports.default = CloudServer;
