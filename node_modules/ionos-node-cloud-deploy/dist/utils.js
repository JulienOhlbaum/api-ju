"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execRestart = exports.uploadSftp = void 0;
const ftp_deploy_1 = __importDefault(require("ftp-deploy"));
const ora_1 = __importDefault(require("ora"));
const chalk_1 = __importDefault(require("chalk"));
const ftp = new ftp_deploy_1.default();
function uploadSftp(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const spinner = (0, ora_1.default)('Uploading files...').start();
        ftp.on('uploading', function (data) {
            spinner.text = `Uploaded ${chalk_1.default.blue(data.transferredFileCount)} of ${chalk_1.default.blue(data.totalFilesCount)} files`;
        });
        try {
            const uploaded = yield ftp.deploy(config);
            const nOfFolders = uploaded.length;
            const nOfFiles = uploaded.reduce((acc, curr) => acc + curr.length, 0);
            spinner.succeed(`Uploaded ${chalk_1.default.blue(nOfFiles)} files from ${chalk_1.default.blue(nOfFolders)} directories`);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }
        catch (error) {
            console.log(error);
            spinner.fail(error.code);
        }
    });
}
exports.uploadSftp = uploadSftp;
const execRestart = (ssh, dir) => __awaiter(void 0, void 0, void 0, function* () {
    return yield ssh.execCommand('rm -rf tmp && mkdir tmp && touch tmp/restart.txt', {
        cwd: dir,
    });
});
exports.execRestart = execRestart;
